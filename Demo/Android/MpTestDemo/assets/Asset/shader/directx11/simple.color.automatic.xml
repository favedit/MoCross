<Configuration>
   <Version label='alpha 0.1' />
   <!-- ------------------------------------------------------------ -->
   <State name='fill_mode'   value='Fill'/>
   <State name='cull_mode'   value='Front'/>
   <State name='depth_mode'  value='Less'/>
   <State name='depth_write' value='Y'/>
   <State name='blend_mode'  value='Y' source='SourceAlpha' target='OneMinusSourceAlpha'/>
   <State name='alpha_test'  value='N'/>
   <!-- ------------------------------------------------------------ -->
   <Specular name='shadow'   value='N'/>
   <Specular name='lightmap' value='N'/>
   <Specular name='fog'      value='N'/>
   <!-- ------------------------------------------------------------ -->
   <Buffer    name='GlobalBuffer'           linker='GlobalBuffer'/>
   <!-- ------------------------------------------------------------ -->
   <Parameter name='vc_model_mat4'          linker='VertexModelMatrix4x4'/>
   <Parameter name='vc_mvp_mat4'            linker='VertexModelViewProjectionMatrix4x4'/>
   <Parameter name='vc_camera_position'     linker='VertexCameraPosition'/>
   <Parameter name='vc_light_mv_mat4'       linker='VertexLightModelMatrix4x4'/>
   <Parameter name='vc_light_mvp_mat4'      linker='VertexLightModelViewProjectrionMatrix4x4'/>
   <Parameter name='vc_light_direction'     linker='VertexLightDirection'/>
   <Parameter name='fc_camera_position'     linker='FragmentCameraPosition'/>
   <Parameter name='fc_light_direction'     linker='FragmentCameraDirection'/>
   <Parameter name='fc_light_depth'         linker='FragmentLightDepth'/>
   <Parameter name='fc_color'               linker='FragmentColor'/>
   <Parameter name='fc_alpha'               linker='FragmentAlpha'/>
   <Parameter name='fc_ambient_color'       linker='FragmentAmbientColor'/>
   <Parameter name='fc_diffuse_color'       linker='FragmentDiffuseColor'/>
   <Parameter name='fc_diffuse_view_color'  linker='FragmentDiffuseViewColor'/>
   <Parameter name='fc_specular_color'      linker='FragmentSpecularColor'/>
   <Parameter name='fc_specular'            linker='FragmentSpecular'/>
   <Parameter name='fc_specular_view_color' linker='FragmentSpecularViewColor'/>
   <Parameter name='fc_specular_view'       linker='FragmentSpecularView'/>
   <Parameter name='fc_reflect_color'       linker='FragmentReflectColor'/>
   <!-- ------------------------------------------------------------ -->
   <Attribute name='POSITION'               linker='Position'/>
   <Attribute name='TEXCOORD0'              linker='Color'/>
   <Attribute name='TEXCOORD1'              linker='Coord'/>
   <Attribute name='TEXCOORD2'              linker='Normal'/>
   <Attribute name='TEXCOORD3'              linker='Binormal'/>
   <Attribute name='TEXCOORD4'              linker='Tangent'/>
   <Attribute name='TEXCOORD5'              linker='BoneIndex'/>
   <Attribute name='TEXCOORD6'              linker='BoneWright'/>
   <!-- ------------------------------------------------------------ -->
   <Sampler name='ft_diffuse'               linker='Diffuse'/>
   <Sampler name='ft_normal'                linker='Normal'/>
   <Sampler name='ft_specular'              linker='Specular'/>
   <Sampler name='ft_light'                 linker='Light'/>
   <Sampler name='ft_environment'           linker='Environment'/>
   <!-- ------------------------------------------------------------ -->
   <Source name='vertex'><![CDATA[
cbuffer cbNeverChanges : register( b0 )
{
    matrix View;
};

cbuffer cbChangeOnResize : register( b1 )
{
    matrix Projection;
};

cbuffer cbChangesEveryFrame : register( b2 )
{
    matrix World;
    float4 vMeshColor;
};


//--------------------------------------------------------------------------------------
struct VS_INPUT
{
   float4 position : POSITION;
<shader:true source='vertex.attribute.color'>
   float4 color    : TEXCOORD0;
</shader:true>
<shader:true source='vertex.attribute.coord'>
   float2 coord    : TEXCOORD1;
</shader:true>
<shader:true source='vertex.attribute.normal'>
   float3 normal   : TEXCOORD2;
<shader:true source='vertex.attribute.normal.full'>
   float3 binormal : TEXCOORD3;
   float3 tangent  : TEXCOORD4;
</shader:true>
</shader:true>
};

struct VS_OUTPUT
{
    float4 position : SV_POSITION;
    float2 coord    : TEXCOORD0;
};

VS_OUTPUT main( VS_INPUT input )
{
    VS_OUTPUT output = (VS_OUTPUT)0;
    output.position = mul( input.position, World );
    output.position = mul( output.position, View );
    output.position = mul( output.position, Projection );
<shader:true source='vertex.attribute.coord'>
    output.coord = input.coord;
</shader:true>
    return output;
}
   ]]></Source>
   <!-- ------------------------------------------------------------ -->
   <Source name='fragment'><![CDATA[
Texture2D txDiffuse : register( t0 );
SamplerState samLinear : register( s0 );

cbuffer cbChangesEveryFrame : register( b2 )
{
    matrix World;
    float4 vMeshColor;
};

struct PS_INPUT
{
    float4 position : SV_POSITION;
    float2 coord    : TEXCOORD0;
};

//--------------------------------------------------------------------------------------
// Pixel Shader
//--------------------------------------------------------------------------------------
float4 main( PS_INPUT input) : SV_Target
{
    return txDiffuse.Sample( samLinear, input.coord ) * vMeshColor;
}

   ]]></Source>
</Configuration>
