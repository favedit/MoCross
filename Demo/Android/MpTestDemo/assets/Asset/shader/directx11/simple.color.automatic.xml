<Configuration>
   <Version label='alpha 0.1' />
   <!-- ------------------------------------------------------------ -->
   <State name='fill_mode'   value='Fill'/>
   <State name='cull_mode'   value='Front'/>
   <State name='depth_mode'  value='Less'/>
   <State name='depth_write' value='Y'/>
   <State name='blend_mode'  value='Y' source='SourceAlpha' target='OneMinusSourceAlpha'/>
   <State name='alpha_test'  value='N'/>
   <!-- ------------------------------------------------------------ -->
   <Specular name='shadow'   value='N'/>
   <Specular name='lightmap' value='N'/>
   <Specular name='fog'      value='N'/>
   <!-- ------------------------------------------------------------ -->
   <Parameter name='vc_model_mat4'          linker='VertexModelMatrix4x4'/>
   <Parameter name='vc_mvp_mat4'            linker='VertexModelViewProjectionMatrix4x4'/>
   <Parameter name='vc_camera_position'     linker='VertexCameraPosition'/>
   <Parameter name='vc_light_mv_mat4'       linker='VertexLightModelMatrix4x4'/>
   <Parameter name='vc_light_mvp_mat4'      linker='VertexLightModelViewProjectrionMatrix4x4'/>
   <Parameter name='vc_light_direction'     linker='VertexLightDirection'/>
   <Parameter name='fc_camera_position'     linker='FragmentCameraPosition'/>
   <Parameter name='fc_light_direction'     linker='FragmentCameraDirection'/>
   <Parameter name='fc_light_depth'         linker='FragmentLightDepth'/>
   <Parameter name='fc_color'               linker='FragmentColor'/>
   <Parameter name='fc_alpha'               linker='FragmentAlpha'/>
   <Parameter name='fc_ambient_color'       linker='FragmentAmbientColor'/>
   <Parameter name='fc_diffuse_color'       linker='FragmentDiffuseColor'/>
   <Parameter name='fc_diffuse_view_color'  linker='FragmentDiffuseViewColor'/>
   <Parameter name='fc_specular_color'      linker='FragmentSpecularColor'/>
   <Parameter name='fc_specular'            linker='FragmentSpecular'/>
   <Parameter name='fc_specular_view_color' linker='FragmentSpecularViewColor'/>
   <Parameter name='fc_specular_view'       linker='FragmentSpecularView'/>
   <Parameter name='fc_reflect_color'       linker='FragmentReflectColor'/>
   <!-- ------------------------------------------------------------ -->
   <Attribute name='POSITION'               linker='Position'/>
   <!-- ------------------------------------------------------------ -->
   <Sampler name='ft_diffuse'               linker='Diffuse'/>
   <Sampler name='ft_normal'                linker='Normal'/>
   <Sampler name='ft_specular'              linker='Specular'/>
   <Sampler name='ft_light'                 linker='Light'/>
   <Sampler name='ft_environment'           linker='Environment'/>
   <!-- ------------------------------------------------------------ -->
   <Source name='vertex'><![CDATA[
cbuffer Global : register(b<shader:write source='parameter.buffer.global'/>){
}

cbuffer EffectCamera : register(b<shader:write source='parameter.buffer.effectcamera'/>){
   float3 vc_camera_position;
}

cbuffer EffectLight : register(b<shader:write source='parameter.buffer.effectlight'/>){
   float4x4 vc_light_mv_mat4;
   float4x4 vc_light_mvp_mat4;
   float3   vc_light_direction;
}

cbuffer RenderTramsform : register(b<shader:write source='parameter.buffer.rendertramsform'/>){
   float4x4 vc_mvp_mat4;
}

struct VS_INPUT
{
   float3 position : POSITION;
};

struct VS_OUTPUT
{
   float4 position      : SV_POSITION;
};

VS_OUTPUT main(VS_INPUT input)
{
   VS_OUTPUT result = (VS_OUTPUT)0;
   float4 position = float4(input.position, 1.0);
   result.position = mul(position, vc_mvp_mat4);
   return result;
}
   ]]></Source>
   <!-- ------------------------------------------------------------ -->
   <Source name='fragment'><![CDATA[
static const float4 lightConvert = float4(1.0, 1.0 / 256.0, 1.0 / 256.0 / 256.0, 1.0 / 256.0 / 256.0 / 256.0);

cbuffer Global : register(b<shader:write source='parameter.buffer.global'/>)
{
}

cbuffer EffectCamera : register(b<shader:write source='parameter.buffer.effectcamera'/>){
   float3 fc_camera_position;
}

cbuffer EffectLight : register(b<shader:write source='parameter.buffer.effectlight'/>){
   float3 fc_light_direction;
   float3 fc_light_depth;
}

cbuffer RenderMaterial : register(b<shader:write source='parameter.buffer.rendermaterial'/>)
{
   float4 fc_color;
   float4 fc_alpha;
<shader:true source='vertex.attribute.color'>
   float4 fc_vertex_color;
</shader:true>
<shader:true source='support.ambient'>
   float4 fc_ambient_color;
</shader:true>
<shader:true source='support.diffuse'>
   float4 fc_diffuse_color;
</shader:true>
<shader:true source='support.diffuse.view'>
   float4 fc_diffuse_view_color;
</shader:true>
<shader:true source='support.specular'>
   float4 fc_specular_color;
   float4 fc_specular;
</shader:true>
<shader:true source='support.specular.view'>
   float4 fc_specular_view_color;
   float4 fc_specular_view;
</shader:true>
<shader:true source='support.environment'>
   float4 fc_reflect_color;
</shader:true>
}

struct PS_INPUT
{
};

<shader:true source='support.ambient.sampler'>
Texture2D ft_diffuse;
SamplerState fs_diffuse = sampler_state{
   Texture = <ft_diffuse>;
   MipFilter = LINEAR;
   MinFilter = LINEAR;
   MagFilter = LINEAR;
};
</shader:true>
<shader:true source='support.diffuse.dump'>
Texture2D ft_normal;
SamplerState fs_normal = sampler_state{
   Texture = <ft_normal>;
   MipFilter = LINEAR;
   MinFilter = LINEAR;
   MagFilter = LINEAR;
};
</shader:true>
<shader:true source='support.specular'>
Texture2D ft_specular;
SamplerState fs_specular = sampler_state{
   Texture = <ft_specular>;
   MipFilter = LINEAR;
   MinFilter = LINEAR;
   MagFilter = LINEAR;
};
</shader:true>
<shader:true source='support.light'>
Texture2D ft_light;
SamplerState fs_light = sampler_state{
   Texture = <ft_light>;
   MipFilter = LINEAR;
   MinFilter = LINEAR;
   MagFilter = LINEAR;
};
</shader:true>
<shader:true source='support.environment'>
Texture2D ft_environment;
SamplerState fs_environment = sampler_state{
   Texture = <ft_environment>;
   MipFilter = LINEAR;
   MinFilter = LINEAR;
   MagFilter = LINEAR;
};
</shader:true>

float4 main(PS_INPUT input) : SV_Target
{
   return float4(1.0, 1.0, 1.0, 1.0);
}
   ]]></Source>
</Configuration>
