<Configuration>
   <Version label='alpha 0.1' />
   <!-- ------------------------------------------------------------ -->
   <State     name='fill_mode'   value='Fill'/>
   <State     name='cull_mode'   value='Front'/>
   <State     name='depth_mode'  value='Less'/>
   <State     name='depth_write' value='Y'/>
   <State     name='blend_mode'  value='Y' source='SourceAlpha' target='OneMinusSourceAlpha'/>
   <State     name='alpha_test'  value='N'/>
   <!-- ------------------------------------------------------------ -->
   <Specular  name='shadow'      value='N'/>
   <Specular  name='lightmap'    value='N'/>
   <Specular  name='fog'         value='N'/>
   <!-- ------------------------------------------------------------ -->
   <Buffer    name='TechniqueStatic'        linker='TechniqueStatic'/>
   <Buffer    name='EffectDynamic'          linker='EffectDynamic'/>
   <Buffer    name='RenderableMaterial'     linker='RenderableMaterial'/>
   <!-- ------------------------------------------------------------ -->
   <Parameter name='vc_model_mat4'          linker='VertexModelMatrix4x4'/>
   <Parameter name='vc_view_mat4'           linker='VertexViewMatrix4x4'/>
   <Parameter name='vc_projection_mat4'     linker='VertexProjectionMatrix4x4'/>
   <Parameter name='vc_mvp_mat4'            linker='VertexModelViewProjectionMatrix4x4'/>
   <Parameter name='vc_camera_position'     linker='VertexCameraPosition'/>
   <Parameter name='vc_light_mv_mat4'       linker='VertexLightModelMatrix4x4'/>
   <Parameter name='vc_light_mvp_mat4'      linker='VertexLightModelViewProjectrionMatrix4x4'/>
   <Parameter name='vc_light_direction'     linker='VertexLightDirection'/>
   <Parameter name='fc_camera_position'     linker='FragmentCameraPosition'/>
   <Parameter name='fc_light_direction'     linker='FragmentLightDirection'/>
   <Parameter name='fc_light_depth'         linker='FragmentLightDepth'/>
   <Parameter name='fc_color'               linker='FragmentColor'/>
   <Parameter name='fc_alpha'               linker='FragmentAlpha'/>
   <Parameter name='fc_vertex_color'        linker='FragmentVertexColor'/>
   <Parameter name='fc_ambient_color'       linker='FragmentAmbientColor'/>
   <Parameter name='fc_diffuse_color'       linker='FragmentDiffuseColor'/>
   <Parameter name='fc_diffuse_view_color'  linker='FragmentDiffuseViewColor'/>
   <Parameter name='fc_specular_color'      linker='FragmentSpecularColor'/>
   <Parameter name='fc_specular'            linker='FragmentSpecular'/>
   <Parameter name='fc_specular_view_color' linker='FragmentSpecularViewColor'/>
   <Parameter name='fc_specular_view'       linker='FragmentSpecularView'/>
   <Parameter name='fc_reflect_color'       linker='FragmentReflectColor'/>
   <!-- ------------------------------------------------------------ -->
   <Attribute name='POSITION'               linker='Position'/>
   <Attribute name='TEXCOORD0'              linker='Color'/>
   <Attribute name='TEXCOORD1'              linker='Coord'/>
   <Attribute name='TEXCOORD2'              linker='Normal'/>
   <Attribute name='TEXCOORD3'              linker='Binormal'/>
   <Attribute name='TEXCOORD4'              linker='Tangent'/>
   <Attribute name='TEXCOORD5'              linker='BoneIndex'/>
   <Attribute name='TEXCOORD6'              linker='BoneWeight'/>
   <!-- ------------------------------------------------------------ -->
   <Sampler   name='ft_diffuse'             linker='PackDiffuse'/>
   <Sampler   name='ft_normal'              linker='PackNormal'/>
   <Sampler   name='ft_specular'            linker='PackSpecular'/>
   <Sampler   name='ft_light'               linker='PackLight'/>
   <Sampler   name='ft_environment'         linker='Environment'/>
   <!-- ------------------------------------------------------------ -->
   <Source name='vertex'><![CDATA[
cbuffer TechniqueStatic : register(b<shader:write source='shader.buffer.technique.static'/>)
{
    float4x4 vc_view_mat4;
    float4x4 vc_projection_mat4;
};

cbuffer EffectDynamic : register(b<shader:write source='shader.buffer.effect.dynamic'/>)
{
    float4x4 vc_model_mat4;
};

//--------------------------------------------------------------------------------------
struct VS_INPUT
{
   float4 position : POSITION;
<shader:true source='vertex.attribute.color'>
   float4 color    : TEXCOORD0;
</shader:true>
<shader:true source='vertex.attribute.coord'>
   float2 coord    : TEXCOORD1;
</shader:true>
<shader:true source='vertex.attribute.normal'>
   float3 normal   : TEXCOORD2;
<shader:true source='vertex.attribute.normal.full'>
   float3 binormal : TEXCOORD3;
   float3 tangent  : TEXCOORD4;
</shader:true>
</shader:true>
};

struct VS_OUTPUT
{
   float4 position      : SV_POSITION;
   float4 modelPosition : TEXCOORD0;
<shader:true source='vertex.attribute.color'>
   float4 color         : TEXCOORD1;
</shader:true>
<shader:true source='vertex.attribute.coord'>
   float2 coord         : TEXCOORD2;
</shader:true>
<shader:true source='vertex.attribute.normal'>
   float3 normal        : TEXCOORD3;
<shader:true source='support.dump'>
   float3 cameraTs      : TEXCOORD4;
   float3 lightTs       : TEXCOORD5;
</shader:true>
</shader:true>
};

VS_OUTPUT main( VS_INPUT input )
{
   VS_OUTPUT output = (VS_OUTPUT)0;
   float4 position = float4(input.position.xyz, 1.0);
   float4 modelPosition = mul(position, vc_model_mat4);
   float4 viewPosition = mul(modelPosition, vc_view_mat4);
   // Calculate model position
   output.modelPosition = modelPosition;
   // Calculate proection position
   output.position = mul(viewPosition, vc_projection_mat4);
   // Set varying
<shader:true source='vertex.attribute.color'>
   output.color = input.color;
</shader:true>
<shader:true source='vertex.attribute.coord'>
   output.coord = input.coord;
</shader:true>
   // Calculate normal
<shader:true source='vertex.attribute.normal'>
   float3x3 modelMat3 = (float3x3)vc_model_mat4;
   float3 normal = normalize(mul(input.normal * 2.0 - 1.0, modelMat3));
   output.normal = normal;
<shader:true source='support.dump'>
   float3 binormal = normalize(mul(input.binormal * 2.0 - 1.0, modelMat3));
   float3 tangent = normalize((mul(input.tangent * 2.0 - 1.0, modelMat3));
   float3x3 matrixTs = float3x3(tangent, binormal, normal);
   float3 cameraDirection = vc_camera_position - v_model_position.xyz;
   output.cameraTs = normalize(mul(cameraDirection, matrixTs));
   output.lightTs = normalize(mul(vc_light_direction, matrixTs));
</shader:true>
</shader:true>
    return output;
}
   ]]></Source>
   <!-- ------------------------------------------------------------ -->
   <Source name='fragment'><![CDATA[
static const float4 lightConvert = float4(1.0, 1.0 / 256.0, 1.0 / 256.0 / 256.0, 1.0 / 256.0 / 256.0 / 256.0);

cbuffer RenderableMaterial : register(b<shader:write source='shader.buffer.renderable.material'/>){
   float4 fc_camera_position;
   float4 fc_light_direction;
   float4 fc_light_depth;
   float4 fc_color;
   float4 fc_alpha;
<shader:true source='vertex.attribute.color'>
   float4 fc_vertex_color;
</shader:true>
<shader:true source='support.ambient'>
   float4 fc_ambient_color;
</shader:true>
<shader:true source='support.diffuse'>
   float4 fc_diffuse_color;
</shader:true>
<shader:true source='support.diffuse.view'>
   float4 fc_diffuse_view_color;
</shader:true>
<shader:true source='support.specular'>
   float4 fc_specular_color;
   float4 fc_specular;
</shader:true>
<shader:true source='support.specular.view'>
   float4 fc_specular_view_color;
   float4 fc_specular_view;
</shader:true>
<shader:true source='support.environment'>
   float4 fc_reflect_color;
</shader:true>
};

struct PS_INPUT
{
   float4 position      : SV_POSITION;
   float4 modelPosition : TEXCOORD0;
<shader:true source='vertex.attribute.color'>
   float4 color         : TEXCOORD1;
</shader:true>
<shader:true source='vertex.attribute.coord'>
   float2 coord         : TEXCOORD2;
</shader:true>
<shader:true source='vertex.attribute.normal'>
   float3 normal        : TEXCOORD3;
<shader:true source='support.dump'>
   float3 cameraTs      : TEXCOORD4;
   float3 lightTs       : TEXCOORD5;
</shader:true>
</shader:true>
};

<shader:true source='support.ambient.sampler'>
Texture2D ft_diffuse;
SamplerState fs_diffuse = sampler_state{
   MipFilter = LINEAR;
   MinFilter = LINEAR;
   MagFilter = LINEAR;
};
</shader:true>
<shader:true source='support.diffuse.dump'>
Texture2D ft_normal;
SamplerState fs_normal = sampler_state{
   MipFilter = LINEAR;
   MinFilter = LINEAR;
   MagFilter = LINEAR;
};
</shader:true>
<shader:true source='support.specular'>
Texture2D ft_specular;
SamplerState fs_specular = sampler_state{
   MipFilter = LINEAR;
   MinFilter = LINEAR;
   MagFilter = LINEAR;
};
</shader:true>
<shader:true source='support.light'>
Texture2D ft_light;
SamplerState fs_light = sampler_state{
   MipFilter = LINEAR;
   MinFilter = LINEAR;
   MagFilter = LINEAR;
};
</shader:true>
<shader:true source='support.environment'>
TextureCube ft_environment;
SamplerState fs_environment = sampler_state{
   MipFilter = LINEAR;
   MinFilter = LINEAR;
   MagFilter = LINEAR;
};
</shader:true>

//--------------------------------------------------------------------------------------
// Pixel Shader
//--------------------------------------------------------------------------------------
float4 main( PS_INPUT input) : SV_Target
{
   float4 result = float4(0.0, 0.0, 0.0, 1.0);
   //............................................................
   // Calculate ambient color
<shader:true source='support.ambient.sampler'>
   float4 color = ft_diffuse.Sample(fs_diffuse, input.coord.xy);
   if(color.a < fc_alpha.x){
      discard;
   }
</shader:true>
<shader:false source='support.ambient.sampler'>
   float4 color = float4(1.0, 1.0, 1.0, 1.0);
</shader:false>
   //............................................................
   // Calculate ambient color
<shader:true source='support.ambient'>
   result.rgb += color.xyz * fc_ambient_color.rgb;
</shader:true>
   //............................................................
<shader:true source='support.diffuse.view|support.specular|support.environment'>
   float3 cameraDirection = normalize(fc_camera_position.xyz - input.modelPosition.xyz);
</shader:true>
   //............................................................
   // Calculate normal
<shader:true source='support.diffuse.dump'>
   float4 normal = ft_normal.Sample(fs_normal, input.coord.xy);
   normal.xyz = normalize(normal.xyz * 2.0 - 1.0);
</shader:true>
   //............................................................
   // Calculate diffuse color
<shader:true source='support.diffuse'>
<shader:true source='support.diffuse.dump'>
   float normalFactor = dot(normal.xyz, -input.light_ts.xyz);
</shader:true>
<shader:true source='support.diffuse.normal'>
   float normalFactor = dot(input.normal.xyz, -fc_light_direction.xyz);
</shader:true>
<shader:true source='vertex.attribute.normal'>
   normalFactor = max(normalFactor, 0.1);
   result.rgb += color.rgb * fc_diffuse_color.rgb * normalFactor;
</shader:true>
</shader:true>
   //............................................................
   // Calculate diffuse view color
<shader:true source='support.diffuse.view'>
<shader:true source='support.diffuse.view.dump'>
   float normalViewFactor = dot(normal.xyz, -input.camera_ts);
</shader:true>
<shader:true source='support.diffuse.view.normal'>
   float normalViewFactor = dot(input.normal, -cameraDirection.xyz);
</shader:true>
   normalViewFactor = max(normalViewFactor, 0.1);
   result.rgb += color.rgb * fc_diffuse_view_color.rgb * normalViewFactor;
</shader:true>
   //............................................................
   // Calculate specular color
<shader:true source='support.specular'>
   float3 reflectionDirection = normalize(reflect(fc_light_direction.xyz, input.normal.xyz));
   float specularFactor = dot(cameraDirection.xyz, reflectionDirection.xyz);
<shader:true source='support.specular.level&vertex.attribute.normal'>
   //specularFactor *= normal.w;
</shader:true>
   specularFactor = max(specularFactor, fc_specular.x);
   specularFactor = min(specularFactor, 1.0);
   specularFactor = pow(specularFactor, fc_specular.y);
   result.rgb += color.rgb * fc_specular_color.rgb * specularFactor;
</shader:true>
   //............................................................
   // Calculate specular view color
<shader:true source='support.specular.view'>
   float specularViewFactor = dot(cameraDirection, input.normal);
<shader:true source='support.specular.level&vertex.attribute.normal'>
   //specularViewFactor *= normal.w;
</shader:true>
   specularViewFactor = max(specularViewFactor, fc_specular_view.x);
   specularViewFactor = min(specularViewFactor, 1.0);
   specularViewFactor = pow(specularViewFactor, fc_specular_view.y);
   result.rgb += color.rgb * fc_specular_view_color.rgb * specularViewFactor;
</shader:true>
   //............................................................
<shader:true source='support.environment'>
   float3 reflectDirection = normalize(reflect(-cameraDirection.xyz, input.normal.xyz)); 
   float4 environmentColor = ft_environment.Sample(fs_environment, reflectDirection); 
<shader:true source='support.light'>
   float4 light = ft_light.Sample(fs_light, input.coord);
   environmentColor *= light.g;
</shader:true>
   result.rgb *= environmentColor.rgb * fc_reflect_color.rgb;
</shader:true>
   //............................................................
   // Calculate color
<shader:true source='vertex.attribute.color'>
   float4 vertexColor = min(input.color, fc_color.y) - fc_color.x;
   vertexColor = vertexColor / (fc_color.y - fc_color.x);
   vertexColor = (vertexColor - fc_color.w) * fc_color.z + 1.0;
   result.rgb *= vertexColor.rgb;
</shader:true>
<shader:true source='support.alpha'>
   result.a = color.a * fc_alpha.z;
</shader:true>
   //............................................................
   return result;
}

   ]]></Source>
</Configuration>
