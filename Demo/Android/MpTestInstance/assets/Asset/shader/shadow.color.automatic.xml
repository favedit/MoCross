<Configuration>
   <Version label='alpha 0.1' />
   <!-- ------------------------------------------------------------ -->
   <State name='fill_mode'   value='Fill'/>
   <State name='cull_mode'   value='Front'/>
   <State name='depth_mode'  value='Less'/>
   <State name='depth_write' value='Y'/>
   <State name='blend_mode'  value='Y' source='SourceAlpha' target='OneMinusSourceAlpha'/>
   <State name='alpha_test'  value='N'/>
   <!-- ------------------------------------------------------------ -->
   <Specular name='shadow'   value='N'/>
   <Specular name='lightmap' value='N'/>
   <Specular name='fog'      value='N'/>
   <!-- ------------------------------------------------------------ -->
   <Const name='vc_model_matrix'           linker='Vertex.ModelMatrix'/>
   <Const name='vc_view_projection_matrix' linker='Vertex.ModelMatrix'/>
   <Const name='vc_camera_position'        linker='Vertex.ModelMatrix'/>
   <Const name='vc_light_direction'        linker='Vertex.ModelMatrix'/>
   <Const name='fc_camera_position'        linker='Vertex.ModelMatrix'/>
   <Const name='fc_light_direction'        linker='Vertex.ModelMatrix'/>
   <!-- ------------------------------------------------------------ -->
   <Attribute name='va_instance' linker='Instance' format='Float1'/>
   <Attribute name='va_position' linker='Position' format='Float4'/>
   <Attribute name='va_color'    linker='Color'    format='ByteNormal4'/>
   <Attribute name='va_coord'    linker='Coord'    format='Float2'/>
   <Attribute name='va_normal'   linker='Normal'   format='Float3'/>
   <Attribute name='va_binormal' linker='Binormal' format='Float3'/>
   <Attribute name='va_tangent'  linker='Tangent'  format='Float3'/>
   <!-- ------------------------------------------------------------ -->
   <Sampler name='fs_diffuse'     linker='Diffuse'     source='PackDiffuse'/>
   <Sampler name='fs_normal'      linker='Normal'      source='PackNormal'/>
   <Sampler name='fs_specular'    linker='Specular'    source='PackSpecular'/>
   <Sampler name='fs_light'       linker='Light'       source='PackLight'/>
   <Sampler name='fs_environment' linker='Environment' source='Environment'/>
   <!-- ------------------------------------------------------------ -->
   <Source name='vertex' include='asset:global.shader'/>
   <Source name='vertex'><![CDATA[
uniform mat3 vc_model_mat3;
uniform mat4 vc_model_mat4;
uniform mat3 vc_mvp_mat3;
uniform mat4 vc_mvp_mat4;
uniform vec3 vc_camera_position;
uniform mat4 vc_light_mv_mat4;
uniform mat4 vc_light_mvp_mat4;
uniform vec3 vc_light_direction;

attribute vec4 va_position;
<shader:true source='vertex.attribute.color'>
attribute vec4 va_color;
</shader:true>
<shader:true source='vertex.attribute.coord'>
attribute vec2 va_coord;
</shader:true>
<shader:true source='vertex.attribute.normal'>
attribute vec3 va_normal;
<shader:true source='vertex.attribute.normal.full'>
attribute vec3 va_binormal;
attribute vec3 va_tangent;
</shader:true>
</shader:true>

varying vec4 v_model_position;
<shader:true source='vertex.attribute.color'>
varying vec4 v_color;
</shader:true>
<shader:true source='vertex.attribute.coord'>
varying vec2 v_coord;
</shader:true>
varying vec4 v_light_view_position;
varying vec4 v_light_position;
<shader:true source='vertex.attribute.normal'>
varying vec3 v_normal;
<shader:true source='support.dump'>
varying vec3 v_camera_ts;
varying vec3 v_light_ts;
</shader:true>
</shader:true>

void main(){
   // Calculate model position
   v_model_position = va_position * vc_model_mat4;
   // Calculate proection position
   gl_Position = va_position * vc_mvp_mat4;
   // Set varying
<shader:true source='vertex.attribute.color'>
   v_color = va_color;
</shader:true>
<shader:true source='vertex.attribute.coord'>
   v_coord = va_coord;
</shader:true>
   // Calculate light position
   v_light_view_position = va_position * vc_light_mv_mat4;
   v_light_position = va_position * vc_light_mvp_mat4;
   // Calculate normal
<shader:true source='vertex.attribute.normal'>
   vec3 normal = normalize(va_normal * vc_model_mat3);
   v_normal = normal;
<shader:true source='support.dump'>
   vec3 binormal = normalize(va_binormal * vc_model_mat3);
   vec3 tangent = normalize(va_tangent * vc_model_mat3);
   mat3 matrixTs = mat3(tangent, binormal, normal);
   vec3 cameraDirection = vc_camera_position - v_model_position.xyz;
   v_camera_ts = normalize(cameraDirection * matrixTs);
   v_light_ts = normalize(vc_light_direction * matrixTs);
</shader:true>
</shader:true>
}
   ]]></Source>
   <!-- ------------------------------------------------------------ -->
   <Source name='fragment'><![CDATA[
<shader:true source='os.android'>
precision mediump float;
</shader:true>

uniform sampler2D fs_light_depth;
<shader:true source='support.diffuse'>
uniform sampler2D fs_diffuse;
</shader:true>
<shader:true source='support.normal'>
uniform sampler2D fs_normal;
</shader:true>
<shader:true source='support.specular'>
uniform sampler2D fs_specular;
</shader:true>
<shader:true source='support.light'>
uniform sampler2D fs_light;
</shader:true>
<shader:true source='support.environment'>
uniform samplerCube fs_environment;
</shader:true>

uniform mat3 fc_model_mat3;
uniform vec3 fc_camera_position;
uniform vec4 fc_light_depth;
uniform vec3 fc_light_direction;
<shader:true source='vertex.attribute.color'>
uniform vec3 fc_vertex_color;
</shader:true>
<shader:true source='support.ambient'>
uniform vec3 fc_ambient_color;
</shader:true>
<shader:true source='support.diffuse'>
uniform vec3 fc_diffuse_color;
</shader:true>
<shader:true source='support.specular'>
uniform vec3 fc_specular_color;
</shader:true>

varying vec4 v_model_position;
varying vec4 v_light_view_position;
varying vec4 v_light_position;
<shader:true source='vertex.attribute.color'>
varying vec4 v_color;
</shader:true>
<shader:true source='vertex.attribute.coord'>
varying vec2 v_coord;
</shader:true>
<shader:true source='vertex.attribute.normal'>
varying vec3 v_normal;
<shader:true source='support.dump'>
varying vec3 v_camera_ts;
varying vec3 v_light_ts;
</shader:true>
</shader:true>

void main(){
   vec4 result = vec4(0.0, 0.0, 0.0, 1.0);
   //............................................................
   vec4 color = vec4(1.0, 1.0, 1.0, 1.0);
   // Calculate ambient color
<shader:true source='support.ambient'>
<shader:true source='support.ambient.sampler'>
   vec4 color = texture2D(fs_diffuse, v_coord);
   if(color.a < fc_alpha.x){
      discard;
   }
</shader:true>
<shader:false source='support.ambient.sampler'>
   vec4 color = vec4(1.0, 1.0, 1.0, 1.0);
</shader:false>
   result.rgb += color.xyz * fc_ambient_color.rgb;
</shader:true>
   //............................................................
   float shadowRate = 0.0;
   float viewDepth = (v_light_view_position.z / v_light_view_position.w) * fc_light_depth.w;
   // Calculate distance
   vec4 lightConvert = vec4(1.0, 1.0 / 256.0, 1.0 / 256.0 / 256.0, 1.0 / 256.0 / 256.0 / 256.0);
   vec2 lightCoord = v_light_position.xy / v_light_position.w;
   lightCoord = (lightCoord + 1.0) * 0.5;
   // Shadow rate (0,0)
   vec4 lightColor = texture2D(fs_light_depth, lightCoord);
   float lightDepth = dot(lightColor, lightConvert);
   if(viewDepth < lightDepth){
      shadowRate += 2.0;
   }
   // Shadow rate (-1, 1)
   lightColor = texture2D(fs_light_depth, lightCoord + fc_light_depth.xy);
   lightDepth = dot(lightColor, lightConvert);
   if(viewDepth < lightDepth){
      shadowRate += 1.0;
   }
   // Shadow rate ( 1, 1)
   lightColor = texture2D(fs_light_depth, lightCoord + fc_light_depth.yy);
   lightDepth = dot(lightColor, lightConvert);
   if(viewDepth < lightDepth){
      shadowRate += 1.0;
   }
   // Shadow rate ( 1,-1)
   lightColor = texture2D(fs_light_depth, lightCoord + fc_light_depth.yx);
   lightDepth = dot(lightColor, lightConvert);
   if(viewDepth < lightDepth){
      shadowRate += 1.0;
   }
   // Shadow rate (-1,-1)
   lightColor = texture2D(fs_light_depth, lightCoord + fc_light_depth.xx);
   lightDepth = dot(lightColor, lightConvert);
   if(viewDepth < lightDepth){
      shadowRate += 1.0;
   }
   shadowRate /= 6.0;
   //............................................................
   // Calculate diffuse color
<shader:true source='support.diffuse'>
<shader:true source='support.diffuse.dump'>
   vec4 normal = texture2D(fs_normal, v_coord);
   normal.xyz = normalize(normal.xyz * 2.0 - 1.0);
   float normalFactor = dot(normal.xyz, -v_light_ts);
</shader:true>
<shader:true source='support.diffuse.normal'>
   float normalFactor = dot(v_normal, -fc_light_direction);
</shader:true>
   normalFactor = max(normalFactor, 0.0);
   result.rgb += color.rgb * fc_diffuse_color.rgb * normalFactor;
</shader:true>
   //............................................................
<shader:true source='support.specular|support.environment'>
   vec3 cameraDirection = normalize(fc_camera_position - v_model_position.xyz);
</shader:true>
   //............................................................
   // Calculate specular color
<shader:true source='support.specular'>
   vec3 reflectionDirection = normalize(reflect(fc_light_direction, v_normal));
   float specularFactor = dot(cameraDirection, reflectionDirection);
<shader:true source='support.specular.level'>
   specularFactor *= normal.w;
</shader:true>
   specularFactor = max(specularFactor, fc_specular.x);
   specularFactor = min(specularFactor, 1.0);
   specularFactor = pow(specularFactor, fc_specular.y);
   result.rgb += color.rgb * fc_specular_color.rgb * specularFactor;
</shader:true>
   //............................................................
<shader:true source='support.environment'>
   vec3 reflectDirection = normalize(reflect(-cameraDirection, v_normal)); 
   vec4 environmentColor = textureCube(fs_environment, reflectDirection); 
<shader:true source='support.light'>
   vec4 light = texture2D(fs_light, v_coord);
   environmentColor *= light.g;
</shader:true>
   result.rgb *= environmentColor.rgb * fc_reflect_color.rgb;
</shader:true>
   //............................................................
   // Calculate color
<shader:true source='vertex.attribute.color'>
   vec4 vertexColor = min(v_color, fc_color.y) - fc_color.x;
   vertexColor = vertexColor / (fc_color.y - fc_color.x);
   vertexColor = (vertexColor - fc_color.w) * fc_color.z;
   vertexColor += 1.0;
   result.rgb *= vertexColor.rgb;
</shader:true>
<shader:true source='support.alpha'>
   result.a = color.a * fc_alpha.z;
</shader:true>
   //............................................................
   gl_FragColor = result;
}
   ]]></Source>
</Configuration>
